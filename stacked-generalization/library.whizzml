;; Stacking modeling library
;; Main exports:
;;  (make-stack dataset-id) - to create the stacked models
;;  (make-stack-prediction models metamodel input-data) -
;;     to use the above to make predictions
;;

;; Extract for a batchpredction its associated dataset of results
(define (batch-dataset id)
  ((fetch (wait id)) "output_dataset_resource"))

;; Create a batchprediction for the given model and datasets,
;; with a map of additional options and using defaults appropriate
;; for model stacking
(define (make-batch ds-id mod-id)
  (let (name (resource-type mod-id))
    (create-batchprediction ds-id mod-id {"all_fields" true
                                          "output_dataset" true
                                          "prediction_name" name})))

;; Auxiliary function extracting the model_inputs of a model
(define (model-inputs mod-id)
  ((fetch mod-id) "input_fields"))

;; Auxiliary function to create the set of stack models
(define (create-stack-models train-id)
  [(create-model {"dataset" train-id})
   (create-ensemble {"dataset" train-id
                     "number_of_models" 20
                     "randomize" false})
   (create-ensemble {"dataset" train-id
                     "number_of_models" 20
                     "randomize" true})
   (create-logisticregression {"dataset" train-id})])

;; Auxiliary funtion to successively create batchpredictions using the
;; given models over the initial dataset ds-id.  Returns the final
;; dataset id.
(define (create-stack-predictions models ds-id)
  (reduce (lambda (did mid) (batch-dataset (make-batch did mid)))
          ds-id
          models))

;; Splits the given dataset, using half of it to create
;; an heterogeneous collection of models and the other
;; half to train a tree that predicts based on those other
;; models predictions.  Returns a map with the collection
;; of models (under the key "models") and the meta-prediction
;; as the value of the key "metamodel".  The key "result"
;; has as value a boolean flag indicating whether the
;; process was successful.
(define (make-stack dataset-id)
  (let ([train-id hold-id] (create-random-dataset-split dataset-id 0.5)
        models (create-stack-models train-id)
        id (create-stack-predictions models hold-id)
        orig-fields (model-inputs (head models))
        obj-id (dataset-get-objective-id train-id)
        meta-id (create-model {"dataset" id
                               "excluded_fields" orig-fields
                               "objective_field" obj-id})
        success? (resource-done? (fetch (wait meta-id))))
    {"models" models "metamodel" meta-id "result" success?}))

;; Use the models and metamodels computed by make-stack
;; to make a prediction on the input-data map.  Returns
;; the identifier of the prediction object.
(define (make-stack-prediction models meta-model input-data)
  (let (preds (map (lambda (m) (create-prediction {"model" m
                                                   "input_data" input-data}))
                   models)
        preds (map (lambda (p)
                     (head (values ((fetch p) "prediction"))))
                   preds)
        meta-input (make-map (model-inputs meta-model) preds))
   (create-prediction {"model" meta-model "input_data" meta-input})))
