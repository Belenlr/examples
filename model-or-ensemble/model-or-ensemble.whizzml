;; Functions for creating the two dataset parts
;; and the model and ensemble from the training set.

(define (sample-dataset ds-id rate oob)
  (create-dataset ds-id {"sample_rate" rate
                         "out_of_bag" oob
                         "seed" "whizzml-example"}))

(define (split-dataset ds-id rate)
  (list (sample-dataset ds-id rate false)
        (sample-dataset ds-id rate true)))

;; Function to extract a quality measure from the evaluation results
(define (quality-measure ev-id)
  (let (ev (fetch (wait ev-id)))
    (or (ev ["result" "model" "average_f_measure"] false)
        (ev ["result" "model" "r_squared"] false)
        (raise "The models couldn't be evaluated"))))

;; Function encapsulating the full workflow
(define (model-or-ensemble src-id)
  (let (ds-id (create-dataset src-id)  ;; full dataset
        ids (split-dataset ds-id 0.8)  ;; split it 80/20
        train-id (ids 0)               ;; the 80% for training
        test-id (ids 1)                ;; and 20% for evaluations
        m-id (create-model train-id)
        e-id (create-ensemble train-id {"number_of_models" 15})
        m-f (quality-measure (create-evaluation m-id test-id))
        e-f (quality-measure (create-evaluation e-id test-id)))
    (log-info "model f " m-f " / ensemble f " e-f)
    (if (> m-f e-f)  m-id e-id)))

;; Compute the result of the script execution
;; - Inputs: [{"name": "input-source-id", "type": "source-id"}]
;; - Outputs: [{"name": "result", "type": "resource-id"}]

(define result (model-or-ensemble input-source-id))
